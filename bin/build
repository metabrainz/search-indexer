#!/bin/bash

REC_HOUR=5
REC_THRESHOLD=72000 # 20 hours
REC_TIMESTAMP_FILE="/home/search/recording_build_timestamp"

FREEDB_DAY=2
FREEDB_HOUR=4
FREEDB_THRESHOLD=86400 # 24 hours
FREEDB_TIMESTAMP_FILE="/home/search/freedb_build_timestamp"

if [ ! -f $FREEDB_TIMESTAMP_FILE ]; then
	date +%s > $FREEDB_TIMESTAMP_FILE
fi
if [ ! -f $REC_TIMESTAMP_FILE ]; then
	date +%s > $REC_TIMESTAMP_FILE
fi

REC_LAST_BUILD=`cat $REC_TIMESTAMP_FILE`
FREEDB_LAST_BUILD=`cat $FREEDB_TIMESTAMP_FILE`
NOW=`date +%s`
DAY=`date +%d`
HOUR=`date +%H`
REC_ELAPSED=`expr $NOW - $REC_LAST_BUILD`
FREEDB_ELAPSED=`expr $NOW - $FREEDB_LAST_BUILD`

echo "$0 starting"

run_and_show_errors() {
	echo "Running $@"
	if ! "$@"
	then
		RC=$?
		echo "FAIL '$@' (rc=$RC)"
		return 1
	else
		echo "PASS '$@'"
		return 0
	fi
}


if [ "$FREEDB_ELAPSED" -ge "$FREEDB_THRESHOLD" ] && 
   [ "$DAY" -eq "$FREEDB_DAY" ] &&
   [ "$HOUR" -ge "$FREEDB_HOUR" ]; then
	echo "Building freedb index. Last index was started $FREEDB_ELAPSED seconds ago"
	date +%s > $FREEDB_TIMESTAMP_FILE
	run_and_show_errors make freedb
else
	echo "Not building freedb index. ($FREEDB_ELAPSED of $FREEDB_THRESHOLD seconds since last freedb build)"
fi

if [ "$REC_ELAPSED" -ge "$REC_THRESHOLD" ] && [ "$HOUR" -ge "$REC_HOUR" ]; then
	echo "Building recording index. Last index was started $REC_ELAPSED seconds ago"
	date +%s > $REC_TIMESTAMP_FILE
	run_and_show_errors make recording
else
	echo "Not building recording index. ($REC_ELAPSED of $REC_THRESHOLD seconds since last recording build)"
fi

run_and_show_errors make

find log -type f -mtime +10 -delete

run_and_show_errors fix-perms

PUSH_TO="dora roobarb"

for h in $PUSH_TO
do
	run_and_show_errors push-to-server $h.localdomain sync ; eval "${h}_rc=$?"
done

for h in $PUSH_TO
do
	if eval "[ \$${h}_rc = 0 ]" ; then run_and_show_errors push-to-server $h.localdomain rotate ; eval "${h}_rc=$?" ; fi
done

for h in $PUSH_TO
do
	if eval "[ \$${h}_rc = 0 ]" ; then
		run_and_show_errors push-to-server $h.localdomain restart
		r=$?
		eval "${h}_rc=$r"
		# The restart causes the load on the target server to spike for a few minutes. Delaying
		# 2 minutes here allows the server to cache the index into ram and return to normal performance.
		# This prevents us from degading overall search performance every 3 hours.
		sleep 120 
	fi
done

echo "$0 completed"

# eof
